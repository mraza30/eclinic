// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
    ADMIN
    PATIENT
    DOCTOR
}

enum AdminRoles {
    READ
    WRITE
    DELETE
    SUPER
}

enum Status {
    PENDING
    COMPLETED
    CANCELLED
    FAILED
}

model User {
    id            String   @id @default(uuid())
    name          String
    email         String   @unique
    phone         String   @unique
    password      String
    image         String?
    emailVerified Boolean  @default(false)
    phoneVerified Boolean  @default(false)
    blocked       Boolean  @default(false)
    role          UserRole
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    Admin         Admin?
    Patient       Patient?
    Doctor        Doctor?
}

model Admin {
    roles  AdminRoles[]
    active Boolean      @default(false)
    userId String       @id
    user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Patient {
    userId      String        @id
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    Appointment Appointment[]
    EMR         EMR?
}

model Doctor {
    userId       String              @id
    user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    Appointment  Appointment[]
    Specialities SpecialtyOnDoctor[]
}

model Appointment {
    id        String   @id @default(uuid())
    patientId String
    patient   Patient  @relation(fields: [patientId], references: [userId], onDelete: Cascade)
    doctorId  String
    doctor    Doctor   @relation(fields: [doctorId], references: [userId], onDelete: Cascade)
    DateTime  DateTime
    status    Status   @default(PENDING)
}

model EMR {
    patientId String  @id
    patient   Patient @relation(fields: [patientId], references: [userId], onDelete: Cascade)
}

model Speciality {
    id      String              @id @default(uuid())
    Doctors SpecialtyOnDoctor[]
}

model SpecialtyOnDoctor {
    doctor       Doctor     @relation(fields: [doctorId], references: [userId])
    doctorId     String
    speciality   Speciality @relation(fields: [specialityId], references: [id])
    specialityId String

    @@id([doctorId, specialityId])
}
